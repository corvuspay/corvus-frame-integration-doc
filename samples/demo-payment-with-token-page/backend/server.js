"use strict";

// Hostname for CorvusPay API. test-wallet.corvuspay.com for testing, wallet.corvuspay.com for production
const CORVUSPAY_HOSTNAME = "test-wallet.corvuspay.com";
// Port for CorvusPay API. Should be 443 for both testing and production
const CORVUSPAY_PORT = 443;
// Store ID for your CorvusPay store. You can find it in CorvusPay Merchant Portal
const CORVUSPAY_STORE_ID = [STORE_ID];
// Secret key for your CorvusPay store. You can find it in CorvusPay Merchant Portal
const CORVUSPAY_SECRET_KEY = [SECRET_KEY];

const express = require("express");

const hmacSHA256 = require("crypto-js/hmac-sha256");
const CryptoJS = require("crypto-js");

const app = express();

const https = require("https");

app.use(express.static("."));
app.use(express.json());

let getTokenForPaymentId = [];

app.listen(4243, "0.0.0.0", () =>
    console.log("Demo payment page backend listening on port 4243!")
);

app.post("/corvuspay-init-payment", async (req, res) => {
    console.log("/corvuspay-init-payment called", req.body, "\n");
    try {
        const customer = JSON.parse(req.body.customer);
        const purchase = JSON.parse(req.body.purchase);
        const cardStorage = JSON.parse(req.body.cardStorage)

        const orderNumber = new Date().getTime();

        // Example of initCardStoragePaymentRequest object, object for saving a card for card storage
        const initCardStoragePaymentRequest = {
            version: "1.4", // version of CorvusPay API
            store_id: CORVUSPAY_STORE_ID,
            order_number: orderNumber, // unique order number generated by merchant
            language: "hr", // language of payment page
            currency: purchase.currency, // currency in ISO 4217 format
            amount: purchase.amount, // amount in currency unit, not cents
            cart: purchase.cart, // cart description
            require_complete: true, // if true, payment will be finished only when order completion is confirmed. Order can be completed in CorvusPay Merchant Portal or by calling /complete endpoint
            save_card: true, //should be true if card storage or subscription is used
            card_storage_type: 'CARD_STORAGE',
            user_card_profiles_id: cardStorage.user_card_profiles_id,
            cardholder_name: customer.cardholderName,
            cardholder_surname: customer.cardholderSurname,
            cardholder_address: customer.cardholderAddress,
            cardholder_city: customer.cardholderCity,
            cardholder_zip_code: customer.cardholderZipCode,
            cardholder_country: customer.cardholderCountry,
            cardholder_email: customer.cardholderEmail,
        };

        const signature = calculateSignature(
            initCardStoragePaymentRequest,
            CORVUSPAY_SECRET_KEY
        );
        console.debug(
            `Calculated signature for order ${orderNumber} is ${signature}\n`
        );
        initCardStoragePaymentRequest.signature = signature;

        const data = JSON.stringify(initCardStoragePaymentRequest);

        const options = {
            method: "POST",
            hostname: CORVUSPAY_HOSTNAME,
            port: CORVUSPAY_PORT,
            path: "/api/js/1.0/init-payment",
            headers: {
                Accept: "application/json",
                "Content-type": "application/json",
                "Content-Length": data.length,
            },
        };

        console.debug("Sending request to CorvusPay...", data, "\n");
        let cpReq = https.request(options, function (cpRes) {
            let chunks = [];

            cpRes.on("data", function (chunk) {
                chunks.push(chunk);
            });

            cpRes.on("end", function () {
                let body = Buffer.concat(chunks);
                if (cpRes.statusCode === 200) {
                    const response = body.toString();
                    console.debug("Response from CorvusPay : ", response);
                    // because we initiated a card storage transaction for saving the card, we should later fetch the token
                    getTokenForPaymentId.push(JSON.parse(response).payment_id)
                    res.status(200).send(response);
                } else {
                    console.error(
                        `Response code : ${cpRes.statusCode}. Message :  ${body.toString()}`
                    );
                    res
                        .status(500)
                        .send({ error: "Error while initiating transaction⚡" });
                }
            });
        });
        cpReq.on("error", function errorHandler(err) {
            console.error(err);
            res
                .status(500)
                .send({ error: "[2]Error while initiating transaction⚡" });
        });

        cpReq.write(data);
        cpReq.end();
    } catch (error) {
        console.error(error);
        res.status(500).send({
            initCardStoragePaymentResponse: { error: error.message },
        });
    }
});

app.post("/corvuspay-check-payment-response", async (req, res) => {
    console.log(
        "/corvuspay-check-payment-response called with parameters\n",
        req.body
    );

    try {
        /**@type {{paymentId: String,
         * status: String,
         * errorCode: String,
         * displayMessage: String,
         * signature: String}}
         */
        const cardPaymentResult = req.body;

        const calculatedSignature = calculateSignature(
            cardPaymentResult,
            CORVUSPAY_SECRET_KEY
        );

        if (
            calculatedSignature.toLocaleLowerCase() !==
            cardPaymentResult.signature.toLocaleLowerCase()
        ) {
            console.error(
                `Calculated signature ${calculatedSignature} does not match signature from response ${cardPaymentResult.signature}\n`
            );
            res.status(400).send();
        } else {
            console.debug("Signatures match. Transaction successful.\n");
            // When the initial request is for saving card, we should always call the get token method. The token that
            // is returned should be saved because it is later used along with the user_card_profiles_id to fetch the session token
            // The token should only be fetched if the initial transaction was a transaction for saving the card (SUBSCRIPTION or CARD_STORAGE),
            // when using a card from card storage this method should not be called.
            if(getTokenForPaymentId.includes(cardPaymentResult.paymentId)) {
                getTokenValue(CORVUSPAY_STORE_ID, cardPaymentResult.paymentId)
                    .then((data) => {
                        console.log("Token Value:", data.token_value);
                        res.status(200).send(data);
                    })
                    .catch((error) => {
                        console.error("Error:", error);
                        res.status(500).send();
                    });
            } else {
                res.status(200).send();
            }
        }
    } catch (error) {
        console.error(error);
        res.status(500).send(error);
    }
});

app.post("/corvuspay-fetch-session-token", async (req, res) => {
    console.log("/corvuspay-fetch-session-token called", req.body, "\n");
    try {
        const sessionTokenData = req.body;
        let getSessionTokenRequest = {
            version: "1.4",
            store_id: CORVUSPAY_STORE_ID,
            user_card_profiles_id: sessionTokenData.userCardProfileId,
            token_value: sessionTokenData.token,
        }
        const signature = calculateSignature(
            getSessionTokenRequest,
            CORVUSPAY_SECRET_KEY
        );
        getSessionTokenRequest.signature = signature;

        const data = JSON.stringify(getSessionTokenRequest);

        const options = {
            method: "POST",
            hostname: CORVUSPAY_HOSTNAME,
            port: CORVUSPAY_PORT,
            path: "/api/js/1.0/get-session-token",
            headers: {
                Accept: "application/json",
                "Content-type": "application/json",
                "Content-Length": data.length,
            },
        };

        console.debug("Sending request to CorvusPay...", data, "\n");

        let cpReq = https.request(options, function (cpRes) {
            let chunks = [];

            cpRes.on("data", function (chunk) {
                chunks.push(chunk);
            });

            cpRes.on("end", function () {
                let body = Buffer.concat(chunks);
                if (cpRes.statusCode === 200) {
                    const response = body.toString();
                    console.debug("Response from CorvusPay : ", response);
                    res.status(200).send(response);
                } else {
                    console.error(
                        `Response code : ${cpRes.statusCode}. Message :  ${body.toString()}`
                    );
                    res
                        .status(500)
                        .send({ error: "Error while fetching session token" });
                }
            });
        });
        cpReq.on("error", function errorHandler(err) {
            console.error(err);
            res
                .status(500)
                .send({ error: "[2]Error while fetching session token" });
        });

        cpReq.write(data);
        cpReq.end();
    } catch (error) {
        console.error(error);
        res.status(500).send({
            sessionTokenResponse: { error: error.message },
        });
    }
})

app.post("/corvuspay-init-payment-with-token", async (req, res) => {
    console.log("/corvuspay-init-payment-with-token called", req.body, "\n")
    try {
        const purchase = JSON.parse(req.body.purchase)
        const sessionToken = JSON.parse(req.body.sessionToken);

        const orderNumber = new Date().getTime();

        const initPaymentWithTokenRequest = {
            version: "1.4", // version of CorvusPay API
            session_token: sessionToken, // session token received in the fetch-session-token call
            store_id: CORVUSPAY_STORE_ID,
            order_number: orderNumber, // unique order number generated by merchant
            language: "hr", // language of payment page
            currency: purchase.currency, // currency in ISO 4217 format
            amount: purchase.amount, // amount in currency unit, not cents
            cart: purchase.cart, // cart description
            require_complete: true, // if true, payment will be finished only when order completion is confirmed. Order can be completed in CorvusPay Merchant Portal or by calling /complete endpoint
        }

        const signature = calculateSignature(
            initPaymentWithTokenRequest,
            CORVUSPAY_SECRET_KEY
        );
        console.debug(
            `Calculated signature for order ${orderNumber} is ${signature}\n`
        );
        initPaymentWithTokenRequest.signature = signature;

        const data = JSON.stringify(initPaymentWithTokenRequest);

        const options = {
            method: "POST",
            hostname: CORVUSPAY_HOSTNAME,
            port: CORVUSPAY_PORT,
            path: "/api/js/1.0/init-payment-with-token",
            headers: {
                Accept: "application/json",
                "Content-type": "application/json",
                "Content-Length": data.length,
            },
        };

        console.debug("Sending request to CorvusPay...", data, "\n");
        let cpReq = https.request(options, function (cpRes) {
            let chunks = [];

            cpRes.on("data", function (chunk) {
                chunks.push(chunk);
            });

            cpRes.on("end", function () {
                let body = Buffer.concat(chunks);
                if (cpRes.statusCode === 200) {
                    const response = body.toString();
                    console.debug("Response from CorvusPay : ", response);
                    res.status(200).send(response);
                } else {
                    console.error(
                        `Response code : ${cpRes.statusCode}. Message :  ${body.toString()}`
                    );
                    res
                        .status(500)
                        .send({ error: "Error while initiating transaction with token⚡" });
                }
            });
        });
        cpReq.on("error", function errorHandler(err) {
            console.error(err);
            res
                .status(500)
                .send({ error: "[2]Error while initiating transaction with token⚡" });
        });

        cpReq.write(data);
        cpReq.end();
    } catch (error) {
        console.error(error);
        res.status(500).send({
            initPaymentWithTokenResponse: { error: error.message },
        });
    }
})

const getTokenValue = (storeId, paymentId) => {
    return new Promise((resolve, reject) => {
        const options = {
            method: "POST",
            hostname: CORVUSPAY_HOSTNAME,
            port: CORVUSPAY_PORT,
            path: "/api/js/1.0/get-token",
            headers: {
                Accept: "application/json",
                "Content-type": "application/json",
            },
        };

        let requestBody = {
            version: "1.4",
            store_id: storeId,
            payment_id: paymentId,
        };

        const signature = calculateSignature(requestBody, CORVUSPAY_SECRET_KEY);

        requestBody.signature = signature;

        const data = JSON.stringify(requestBody);
        console.debug("Sending request to CorvusPay...", data, "\n");
        let cpReq = https.request(options, function (cpRes) {
            let chunks = [];

            cpRes.on("data", function (chunk) {
                chunks.push(chunk);
            });

            cpRes.on("end", function () {
                let body = Buffer.concat(chunks);
                if (cpRes.statusCode === 200) {
                    const response = body.toString();
                    console.debug("Response from CorvusPay : ", response);
                    resolve(JSON.parse(response));
                } else {
                    console.error(
                        `Response code : ${cpRes.statusCode}. Message :  ${body.toString()}`
                    );
                    reject(new Error(`Error fetching token value: ${cpRes.statusCode}`));
                }
            });
        });
        cpReq.on("error", function errorHandler(err) {
            console.error(err);
            reject(new Error(`Error fetching token value: ${err.message}`));
        });

        cpReq.write(data);
        cpReq.end();
    });
};

const calculateSignature = (params, secretKey) => {
    console.debug(`Calculating signature for order ${params.order_number}...`);

    const sortedEntries = Object.entries(params)
        .filter(([key]) => key.toLowerCase() !== "signature")
        .sort(([keyA], [keyB]) => keyA.localeCompare(keyB))
        .map(([key, value]) => `${key}${value}`)
        .join("");

    console.debug(`Sorted keys and values for hashing: ${sortedEntries}`);

    const hash = hmacSHA256(sortedEntries, secretKey);

    return hash.toString(CryptoJS.enc.Hex);
};
